-- Step 1: Create the Database
CREATE DATABASE payroll_db;
USE payroll_db;

-- Step 2: Create Employees Table (Basic Employee Details)
CREATE TABLE employees (
    employee_id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    date_hired DATE NOT NULL,
    position VARCHAR(100) NOT NULL,
    status ENUM('Regular', 'Contractual') NOT NULL,
    basic_salary DECIMAL(10,2) NOT NULL,
    present_address TEXT,
    contact_number VARCHAR(50),
    birthdate DATE NOT NULL,
    marital_status ENUM('Married', 'Single') NOT NULL
);

-- Step 3: Create Payroll Table (Salary Transactions)
CREATE TABLE payroll (
    payroll_id INT AUTO_INCREMENT PRIMARY KEY,
    employee_id INT NOT NULL,
    pay_date DATE NOT NULL,
    basic_salary DECIMAL(10,2) NOT NULL,
    deductions DECIMAL(10,2) NOT NULL,
    net_salary DECIMAL(10,2) NOT NULL,
    payment_status ENUM('Paid', 'Unpaid') DEFAULT 'Unpaid',
    FOREIGN KEY (employee_id) REFERENCES employees(employee_id) ON DELETE CASCADE
);

-- Step 4: Create Attendance Table
CREATE TABLE attendance (
    attendance_id INT AUTO_INCREMENT PRIMARY KEY,
    employee_id INT NOT NULL,
    work_date DATE NOT NULL,
    clock_in TIME NOT NULL,
    clock_out TIME NOT NULL,
    hours_worked DECIMAL(5,2) NOT NULL,
    status ENUM('Present', 'Absent', 'Late', 'On Leave') NOT NULL,
    FOREIGN KEY (employee_id) REFERENCES employees(employee_id) ON DELETE CASCADE
);

-- Step 5: Create Overtime Table
CREATE TABLE overtime (
    overtime_id INT AUTO_INCREMENT PRIMARY KEY,
    employee_id INT NOT NULL,
    overtime_date DATE NOT NULL,
    overtime_hours DECIMAL(5,2) NOT NULL,
    overtime_rate DECIMAL(10,2) NOT NULL,
    total_overtime_pay DECIMAL(10,2) NOT NULL,
    FOREIGN KEY (employee_id) REFERENCES employees(employee_id) ON DELETE CASCADE
);

-- Step 6: Create Deductions Table
CREATE TABLE deductions (
    deduction_id INT AUTO_INCREMENT PRIMARY KEY,
    employee_id INT NOT NULL,
    sss DECIMAL(10,2) NOT NULL,
    philhealth DECIMAL(10,2) NOT NULL,
    pagibig DECIMAL(10,2) NOT NULL,
    tax DECIMAL(10,2) NOT NULL,
    total_deductions DECIMAL(10,2) GENERATED ALWAYS AS (sss + philhealth + pagibig + tax) STORED,
    FOREIGN KEY (employee_id) REFERENCES employees(employee_id) ON DELETE CASCADE
);

-- Step 7: Create Bonuses Table
CREATE TABLE bonuses (
    bonus_id INT AUTO_INCREMENT PRIMARY KEY,
    employee_id INT NOT NULL,
    bonus_date DATE NOT NULL,
    bonus_amount DECIMAL(10,2) NOT NULL,
    bonus_reason VARCHAR(255),
    FOREIGN KEY (employee_id) REFERENCES employees(employee_id) ON DELETE CASCADE
);

-- Step 8: Create Payroll Summary Table
CREATE TABLE payroll_summary (
    summary_id INT AUTO_INCREMENT PRIMARY KEY,
    employee_id INT NOT NULL,
    month_year DATE NOT NULL,
    total_gross_salary DECIMAL(10,2) NOT NULL,
    total_overtime DECIMAL(10,2) NOT NULL,
    total_deductions DECIMAL(10,2) NOT NULL,
    total_net_salary DECIMAL(10,2) GENERATED ALWAYS AS (total_gross_salary + total_overtime - total_deductions) STORED,
    FOREIGN KEY (employee_id) REFERENCES employees(employee_id) ON DELETE CASCADE
);

-- Step 9: Insert Sample Data
INSERT INTO employees (name, date_hired, position, status, basic_salary, present_address, contact_number, birthdate, marital_status)
VALUES 
('John Doe', '2023-01-10', 'Software Engineer', 'Regular', 50000, 'Manila', '09123456789', '1990-03-25', 'Married'),
('Jane Smith', '2022-07-15', 'HR Manager', 'Regular', 60000, 'Quezon City', '09234567890', '1985-12-10', 'Single'),
('Mark Lee', '2024-03-01', 'Data Analyst', 'Contractual', 45000, 'Cebu City', '09345678901', '1995-06-20', 'Single');

INSERT INTO payroll (employee_id, pay_date, basic_salary, deductions, net_salary, payment_status)
VALUES 
(1, '2025-02-28', 50000, 2000, 48000, 'Paid'),
(2, '2025-02-28', 60000, 2500, 57500, 'Paid'),
(3, '2025-02-28', 45000, 1500, 43500, 'Paid');

INSERT INTO attendance (employee_id, work_date, clock_in, clock_out, hours_worked, status)
VALUES 
(1, '2025-02-23', '08:00:00', '17:00:00', 8.00, 'Present'),
(2, '2025-02-23', '09:00:00', '18:00:00', 8.00, 'Present'),
(3, '2025-02-23', '08:30:00', '17:30:00', 8.00, 'Present');

INSERT INTO overtime (employee_id, overtime_date, overtime_hours, overtime_rate, total_overtime_pay)
VALUES 
(1, '2025-02-23', 2, 200, 400),
(2, '2025-02-23', 3, 250, 750),
(3, '2025-02-23', 1, 180, 180);

INSERT INTO deductions (employee_id, sss, philhealth, pagibig, tax)
VALUES 
(1, 500, 300, 200, 1000),
(2, 600, 350, 250, 1300),
(3, 400, 250, 150, 700);

INSERT INTO bonuses (employee_id, bonus_date, bonus_amount, bonus_reason)
VALUES 
(1, '2025-02-20', 5000, 'Performance Bonus'),
(2, '2025-02-20', 7000, 'Annual Bonus'),
(3, '2025-02-20', 3000, 'Quarterly Bonus');

INSERT INTO payroll_summary (employee_id, month_year, total_gross_salary, total_overtime, total_deductions)
VALUES 
(1, '2025-02-01', 50000, 400, 2000),
(2, '2025-02-01', 60000, 750, 2500),
(3, '2025-02-01', 45000, 180, 1500);

-- Step 10: Query to Show All Payroll Data
SELECT 
    e.employee_id,
    e.name AS employee_name,
    e.date_hired,
    e.position,
    e.status,
    e.basic_salary,
    e.present_address,
    e.contact_number,
    e.birthdate,
    e.marital_status,
    p.pay_date,
    p.basic_salary AS payroll_basic_salary,
    p.deductions AS total_deductions,
    p.net_salary,
    p.payment_status,
    COUNT(a.attendance_id) AS total_working_days,
    SUM(a.hours_worked) AS total_hours_worked,
    COALESCE(SUM(o.overtime_hours), 0) AS total_overtime_hours,
    COALESCE(SUM(o.total_overtime_pay), 0) AS total_overtime_pay,
    d.sss, d.philhealth, d.pagibig, d.tax, d.total_deductions,
    COALESCE(SUM(b.bonus_amount), 0) AS total_bonus,
    ps.month_year, ps.total_gross_salary, ps.total_overtime,
    ps.total_deductions AS payroll_summary_deductions, ps.total_net_salary
FROM employees e
LEFT JOIN payroll p ON e.employee_id = p.employee_id
LEFT JOIN attendance a ON e.employee_id = a.employee_id
LEFT JOIN overtime o ON e.employee_id = o.employee_id
LEFT JOIN deductions d ON e.employee_id = d.employee_id
LEFT JOIN bonuses b ON e.employee_id = b.employee_id
LEFT JOIN payroll_summary ps ON e.employee_id = ps.employee_id
GROUP BY e.employee_id, p.pay_date, ps.month_year
ORDER BY e.name, p.pay_date DESC;
